# -*- coding: utf-8 -*-
"""
Created on Sun Apr 15 13:57:50 2018

@author: Kenneth

Table of Contents:

"""
import tkinter.constants as tc
import tkinter as tk
import time
import tkinter.messagebox as msg
from PIL import Image, ImageTk
import webbrowser
import os
import guerillo.pinellas as pinellas
from threading import Thread


class SecondaryThread(Thread):

    def __init__(self, gui_object,fields_list,status_label):
        super().__init__()
        self.gui_object = gui_object
        self.status_label = status_label
        self. fields_list = fields_list

    def run(self):
        self.gui_object.retrieve_inputs_and_run(self.fields_list, self.status_label)


class GUI:
    root_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
    images_path = root_path + "\\res\\img\\"
    output_list = []
    entry_fields_list = []

    def login(self):
        self.login_screen.grid_remove()
        self.search_screen.grid()

    def do_nothing(self):
        print("would have done something")

    def link_to_pano(self, event):
        webbrowser.open_new(r"http://www.panoramic.global")

    def search_button_method(self, passed_fields_list, passed_status_label):
        passed_status_label.configure(text="Getting prepped...")
        search_thread = SecondaryThread(self,passed_fields_list,passed_status_label)
        search_thread.start()

    def retrieve_inputs_and_run(self, fields_list, status_label):
        output_list = []
        for field_reference in fields_list:
            output_list.append(field_reference.get("1.0", "end-1c"))
        pinellas_instance = pinellas.Pinellas(status_label)
        pinellas_instance.run(output_list)
        status_label.configure(text="Ready to search.")

    def clear_inputs(self, fields_list):
        for field_reference in fields_list:
            print(field_reference.get("1.0", "end-1c"))
            field_reference.delete('1.0', tc.END)

##########
##########
    def create_core_window(self):
        self.root = tk.Tk()
        self.root.title("Guerillo")
        self.root.iconbitmap(self.images_path + 'phone.ico')
        self.root.geometry('400x350')  # syntax is 'WidthxHeight'
        self.root.config(background="white")
    
    def create_status_bar(self):
        self.status_frame = tk.Frame(self.root)
        self.status_frame.pack(side=tc.BOTTOM, fill=tc.X)
        self.status = tk.Label(self.status_frame, text="Ready to search.", bd=1, relief=tc.SUNKEN, anchor=tc.W)
        self.status.pack(side=tc.BOTTOM, fill=tc.X)

    def create_main_frame(self):
        self.main_frame = tk.Frame(self.root,bg="yellow")
        self.main_frame.pack(fill=tc.BOTH,expand=1)
        self.main_frame.grid_rowconfigure(0, weight=1)
        self.main_frame.grid_columnconfigure(0, weight=1)

    def create_search_screen(self):
        self.search_screen = tk.Frame(self.main_frame, bg="white")
        self.search_screen.grid(row=0,column=0,sticky="nsew")

    def create_login_screen(self):
        self.login_screen = tk.Frame(self.main_frame,bg="white")
        self.login_screen.grid(row=0,column=0,sticky="nsew")

        self.login_elements_frame = tk.Frame(self.login_screen,bg="white")
        self.login_elements_frame.place(in_=self.login_screen, anchor="c", relx=.50, rely=.50)

        self.username_label = tk.Label(self.login_elements_frame,bg="white",text="Username")
        self.username_label.grid(row=0)
        self.password_label = tk.Label(self.login_elements_frame,bg="white",text="Password")
        self.password_label.grid(row=1)
        self.login_button = tk.Button(self.login_elements_frame,text="Login",
                                      command=lambda:self.login())
        self.login_button.grid(row=2)

    def create_logo(self):
        # get logo and scale it down
        self.pano_source_image = Image.open(self.images_path + "pano.png")
        self.logo = ImageTk.PhotoImage(self.pano_source_image)
        # get logo embedded at bottom right corner
        logo_label = tk.Label(self.root, image=self.logo, highlightthickness=0, borderwidth=0, cursor="hand2", anchor=tc.E)
        logo_label.image = self.logo
        logo_label.place(rely=1.0, relx=1.0, x=-11, y=-20, anchor=tc.SE)
        logo_label.bind("<Button-1>", self.link_to_pano)

    def create_top_menu(self):
        # create basic menu
        self.top_menu = tk.Menu(self.root)
        self.root.config(menu=self.top_menu)
        # add a file dropdown menu
        self.file_menu = tk.Menu(self.top_menu, tearoff=False)
        self.top_menu.add_cascade(label="File", menu=self.file_menu)
        self.file_menu.add_command(label="New Search / Clear Page", command=lambda: self.clear_inputs(self.entry_fields_list)) #TODO: check if we dont need lamba anymore
        self.file_menu.add_separator()
        self.file_menu.add_command(label="Quit", command=self.root.destroy)

    def create_entry_grid(self):
        # build entry grid frame (grid layout for text entry components and search button)
        self.entry_grid_frame = tk.Frame(self.search_screen, bg="white")
        self.entry_grid_frame.place(in_=self.search_screen, anchor="c", relx=.50, rely=.30)

    def inject_lower_bound_elements(self,grid_target,row_placement):
        self.lower_bound_label = tk.Label(grid_target, bg="white", text="Min Mortgage Amount", font=("Constantia", 12))
        self.lower_bound_label.grid(row=row_placement, column=0, sticky=tc.E)
        self.lower_bound_input = tk.Text(grid_target, height=1, width=10)
        self.lower_bound_input.grid(row=row_placement, column=1)
        self.entry_fields_list.append(self.lower_bound_input)

    def inject_upper_bound_elements(self,grid_target,row_placement):
        self.upper_bound_label = tk.Label(grid_target, bg="white", text="Max Mortgage Amount", font=("Constantia", 12))
        self.upper_bound_label.grid(row=row_placement, column=0, sticky=tc.E)
        self.upper_bound_input = tk.Text(grid_target, height=1, width=10)
        self.upper_bound_input.grid(row=row_placement, column=1)
        self.entry_fields_list.append(self.upper_bound_input)

    def inject_start_date_elements(self,grid_target,row_placement):
        self.start_date_label = tk.Label(grid_target, bg="white", text="Start Date", font=("Constantia", 12))
        self.start_date_label.grid(row=row_placement, column=0, sticky=tc.E)
        self.start_date_input = tk.Text(grid_target, height=1, width=10)
        self.start_date_input.grid(row=row_placement, column=1)
        self.entry_fields_list.append(self.start_date_input)

    def inject_end_date_elements(self,grid_target,row_placement):
        self.end_date_label = tk.Label(grid_target, bg="white", text="End Date", font=("Constantia", 12))
        self.end_date_label.grid(row=row_placement, column=0, sticky=tc.E)
        self.end_date_input = tk.Text(grid_target, height=1, width=10)
        self.end_date_input.grid(row=row_placement, column=1)
        self.entry_fields_list.append(self.end_date_input)

    def inject_search_button(self,grid_target,row_placement):
        search_button = tk.Button(grid_target, height=2, width=10, text="Search", font=("Constantia", 12),
                                  command=lambda: self.search_button_method(self.entry_fields_list, self.status)) #TODO: Check if we dont need lambda anymore
        search_button.grid(row=row_placement, column=0, columnspan=2, sticky=tc.E + tc.W, padx=10)

    def inject_county_dropdown(self,grid_target,row_placement):
        self.county_dropdown_label = tk.Label(grid_target,bg="white",text="County to Search",font=("Constantia",12))
        self.county_dropdown_label.grid(row=row_placement,column=0,sticky=tc.E)
        self.county_options = [
            "Pinellas",
            "Hillsborough"
        ]
        self.variable = tk.StringVar(grid_target)
        self.variable.set(self.county_options[0])
        self.county_dropdown = tk.OptionMenu(grid_target, self.variable, *self.county_options)
        self.county_dropdown.grid(row=row_placement,column = 1)
        self.county_dropdown.configure(state="disabled")

    def inject_search_query_elements(self,grid_target,row_count):
        self.inject_county_dropdown(grid_target,row_count-6)
        self.inject_lower_bound_elements(grid_target,row_count-5)
        self.inject_upper_bound_elements(grid_target,row_count-4)
        self.inject_start_date_elements(grid_target,row_count-3)
        self.inject_end_date_elements(grid_target,row_count-2)
        self.inject_search_button(grid_target,row_count-1)



    def __init__(self):
        self.create_core_window()
        self.create_main_frame()
        self.create_status_bar()
        self.create_search_screen()
        self.create_logo()
        self.create_top_menu()
        self.create_entry_grid()
        self.inject_search_query_elements(self.entry_grid_frame,6)

        self.search_screen.grid_remove()
        self.create_login_screen()
        #self.login_screen.grid_remove()
        self.root.mainloop()




gui = GUI()
